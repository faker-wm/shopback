#把指定级别及以上的日志信息输出到指定的一个或者多个位置
#Log4j的root配置语法:log4j.rootLogger = 日志级别 , appenderName, appenderName, …
#Log4j根据日志信息的重要程度，分OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
#Log4j官方建议实际实用的话，Log4j建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG
#日志输出级别：Debug < Info < Warn < Error < Fatal 

#mybatis显示SQL语句日志配置，com.user.dao是mybatis框架中dao接口所在的包名 
#log4j的logger配置语法：log4j.logger.packageName[.ClassName]=level[,appender]
#log4j.logger给包和类指定级别,如果不配置这个，则采用log4j.rootLogger的级别
#指定mybatis框架中com.user.dao接口所在的包打印DEBUG级别日志
#打印显示的sql语句默认为debug级别，所以必须设置为debug级别
log4j.logger.com.hyxy.dao=DEBUG


#root日志定义-----输出级别(debug)和输出平台(console,infoFile,warnFile,errorFile,fatalFile)
#日志输出级别为debug:把debug层级以及以上的级别信息输出到指定的平台;如果设为info,比INFO级别小的debug级别的就不再输出了
log4j.rootLogger=info,console,infoFile,warnFile,errorFile,fatalFile


#debug调试信息级别日志----控制台打印
#设置console写出器目的地, -- 打印到屏幕
log4j.appender.console=org.apache.log4j.ConsoleAppender 
#输出日志到控制台的方式，默认为System.out
#System.out---输出控制台，System.err-----会当作错误输出，全是红色的
log4j.appender.console.Target=System.err
# org.apache.log4j.PatternLayout:灵活地指定布局模式
log4j.appender.console.layout=org.apache.log4j.PatternLayout 
#上一句设置了PatternLayout灵活指定格式，则要指定打印参数
#显示信息全：2019-04-26 09:02:10,003 [main] DEBUG [com.user.dao.UserDao.SelectUser] - ==>
log4j.appender.console.layout.ConversionPattern=%d %-5p [%c]:%L - %m%n
#显示信息少：2019-04-26 09:07:33,975 DEBUG - <==    sql语句    
#log4j.appender.console.layout.ConversionPattern=%d %-5p - %m%n







